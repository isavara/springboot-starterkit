name: Docker image
on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
      - 'v*.*'
      - '*'
jobs:
  build:
    name: Build & push docker image
    runs-on: mend-new-runer-1-label-1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: mend-white-src-scan
      
      - name: Present working directory        
        run: pwd

      - name: Check PR Description for Flags
        id: check-flags
        run: |
          PR_BODY=$(jq -r .pull_request.body "$GITHUB_EVENT_PATH")
          echo "PR Body: $PR_BODY"
          if echo "$PR_BODY" | grep -q "Run Whitesource scan"; then
            echo "::set-output name=flag_a::true"
          fi
      
      - name: Convert HTML to Markdown and Comment
        run: |
          #html_to_markdown=$(cat /home/itadmin/mend-runner/report/whitesource_scan_urls.html | html-to-markdown)
          #echo "$html_to_markdown" > report.md
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat /home/itadmin/mend-runner/report/whitesource_scan_urls.html)"
          env:
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }

      - name: Run Whitesource scan is Checked
        if: steps.check-flags.outputs.flag_a == 'true'
        run: echo "Running Whitesource scan"
      
      - name: List Docker images with 'latest' tag
        id: list-images
        run: |
          IMAGES=$(docker images --format "{{.Repository}}:latest" | sort | uniq)
          if [ -z "$IMAGES" ]; then
            echo "No Docker images with 'latest' tag found."
            exit 1
          else
            echo "Docker images with 'latest' tag found:"
            echo "$IMAGES"
          fi        

      - name: Tag Docker images with "GHA"
        run: |
          IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ':latest' | sort | uniq)       
          for IMAGE in $IMAGES; do
            echo "Inside for loop...IMAGE==="
            echo $IMAGE
            echo "docker tag $IMAGE ${IMAGE%:latest}:GHA"            
            docker tag $IMAGE ${IMAGE%:latest}:GHA
            docker rmi $IMAGE            
          done